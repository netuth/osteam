#include<stdio.h> 
#include <string.h>
#include <stdlib.h>
#define SIZE 100
#define SSIZE 20

int main()
{
	int i, limit , total = 0, x=0, count=0,counter = 0, time_quantum = 1, cnt = 0;
	int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
	float average_wait_time, average_turnaround_time, Norm_turnaround_time = 0.0,Normsum=0.0;
	FILE* file = NULL;
	char c[SIZE];
	char* a=NULL, * b = NULL;
	/*printf("\nEnter Total Number of Processes:\t");
	scanf("%d", &limit);
	x = limit;
	for (i = 0; i < limit; i++)
	{
		printf("\nEnter Details of Process[%d]\n", i + 1);
		printf("Arrival Time:\t");
		scanf("%d", &arrival_time[i]);
		printf("Burst Time:\t");
		scanf("%d", &burst_time[i]);
		temp[i] = burst_time[i];
	}
	printf("\nEnter Time Quantum:\t");
	scanf("%d", &time_quantum);*/
	fopen_s(&file, "input.txt", "r");
	if (file == NULL) {
		printf("파일이 존재하지 않습니다.");
		return -1;
	}
	else {
		printf("파일을 열어 값을 읽어옵니다.\n");
	}
	while (fgets(c, SIZE, file) != NULL) {
		
		if (c[0] == '\n') continue;	// 빈줄 넘어가기

		//c[SIZE - 1] = '\0';

		a = strtok_s(c, " ", &b);
		if (*a == '0') {	//ID로 0이 들어오면 입력 종료
			printf("id값으로 0을 만났습니다. 입력을 종료합니다.\n");
			break;
		}
		 count = atoi(a);
		 limit = atoi(a);
		a = strtok_s(NULL, " ", &b);
		arrival_time[count-1] = atoi(a);
		a = strtok_s(NULL, " ", &b);
		burst_time[count-1]= atoi(a);
		
		
		//limit++;	// 프로세스 개수 증가
	}
	for(int i=0;i<limit;i++) temp[i] = burst_time[i];
	fclose(file);	//파일 닫기
	x = limit;
	printf("\ninput.txt\n");
	printf("\nPID\t\tBurst Time\t Arrival Time\t End Time\t Turnaround Time\t Waiting Time\t Normalized Turnaround Time\n");
	for (total = 0, i = 0; x != 0;)
	{
		if (temp[i] <= time_quantum && temp[i] > 0)
		{
			if(total!=18)total = total + temp[i];
			else 
			temp[i] = 0;
			counter = 1;
		}
		else if (temp[i] > 0)
		{
			temp[i] = temp[i] - time_quantum;
			total = total + time_quantum;
		}
		if (temp[i] == 0 && counter == 1)
		{
			x--;

			Norm_turnaround_time = (float)(total - arrival_time[i]) / (float)burst_time[i];
			printf("\nPID:%d\t\t%d \t\t %d\t\t %d\t\t %d\t\t\t %d\t\t %.2f", i + 1, burst_time[i], arrival_time[i], total,total - arrival_time[i], total - arrival_time[i] - burst_time[i], Norm_turnaround_time);
			Normsum += Norm_turnaround_time;
			wait_time = wait_time + total - arrival_time[i] - burst_time[i];

			turnaround_time = turnaround_time + total - arrival_time[i];


			counter = 0;
		}
		if (i == limit - 1)
		{
			i = 0;
		}
		else if (arrival_time[i + 1] <= total)
		{
			i++;
		}
		else
		{
			i = 0;
		}
	}
	average_wait_time = wait_time * 1.0 / limit;
	average_turnaround_time = turnaround_time * 1.0 / limit;

	printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
	printf("\nEnd time:\t\t%d", total);
	printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
	printf("\nAvg Normalized TA Time:\t%f\n", Normsum/limit);
	return 0;
}
